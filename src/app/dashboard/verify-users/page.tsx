"use client";
import { CUSTODYCONTRACT } from "@/data/coinsData";
import { getKYCByUserId, getUser, getUsersInProgress } from "@/server";
import { approveKyc, rejectKyc } from "@/server/actions/kyc/kyc-action";
import {
  sendApproveEmail,
  sendRejectEmail,
} from "@/server/actions/mail/send-email";
import CUSTODYABI from "@/utils/contract/abi/custodyContractABI.json";
import {
  addToWhiteListWithAdmin,
  setPrivateKeyAndAddress,
} from "@/utils/contract/contractWithoutWalletInteraction";
import { createAddress } from "@/utils/wallet";
import { ethers } from "ethers";
import { useSession } from "next-auth/react";
import { Button } from "primereact/button";
import { Checkbox, CheckboxChangeEvent } from "primereact/checkbox";
import { Column } from "primereact/column";
import { DataTable } from "primereact/datatable";
import { Dialog } from "primereact/dialog";
import { Image } from "primereact/image";
import { Tag } from "primereact/tag";
import { useEffect, useState } from "react";
import Swal from "sweetalert2";

// Generated by https://quicktype.io

export interface IUserWithKYC {
  id: string;
  email: string;
  name: string;
  lastName: string;
  phone: string;
  nationality: null;
  country: null;
  createdAt: Date;
  updatedAt: Date;
  roles: string[];
  status: string;
  emailVerified: null;
  isActive: boolean;
  image: null;
  documentImage: null;
  address: string;
  verified: string;
  KYC: Kyc[];
}

export interface Kyc {
  id: string;
  userId: string;
  documentType: string;
  documentFrontUrl: string;
  documentBackUrl: string;
  verificationStatus: string;
  verificationDate: Date;
  passwordHashPrivateKey: string;
}

const VerifyUsersPage = () => {
  const [usersWithKYC, setUsersWithKYC] = useState<IUserWithKYC[]>([]);
  const [loadingButton, setLoadingButton] = useState(false);
  const { data } = useSession();

  const load = () => {
    setLoadingButton(true);
    getUsersInProgress()
      .then((users) => {
        setUsersWithKYC(users as IUserWithKYC[]);

        setTimeout(() => {
          setLoadingButton(false);
        }, 500);
      })
      .catch((error) => {
        console.log(error);
        setLoadingButton(false);
      });
  };

  useEffect(() => {
    load();
  }, []);

  const getKYCMessage = (status: string) => {
    switch (status) {
      case "unverified":
        return "No verificado";
      case "pending":
        return "Pendiente";
      case "approved":
        return "Aprobado";
      case "rejected":
        return "Rechazado";
      default:
        return "Info";
    }
  };
  const getKYCStatus = (status: string) => {
    switch (status) {
      case "unverified":
        return "danger";
      case "pending":
        return "warning";
      case "approved":
        return "success";
      case "rejected":
        return "danger";
      default:
        return "info";
    }
  };
  return (
    <div className="md:px-5 px-2">
      <div className="flex justify-between">
        <div>
          <h2 className="font-bold text-2xl">Verificación de Usuarios (KYC)</h2>
          <p className="mb-4">Esta página es para verificar usuarios</p>
        </div>
        <div>
          <Button
            className="flex items-center gap-2 bg-primary px-4 py-1 rounded-3xl"
            onClick={() => {
              load();
            }}
            loading={loadingButton}
          >
            <i className="pi pi-refresh"></i> Actualizar
          </Button>
        </div>
      </div>
      <DataTable
        value={usersWithKYC}
        loading={loadingButton}
        scrollable
        tableStyle={{ background: "red" }}
      >
        <Column
          header="#"
          headerStyle={{ width: "3rem" }}
          body={(data, options) => options.rowIndex + 1}
        ></Column>
        <Column field="name" header="Nombre"></Column>
        <Column field="lastName" header="Apellido"></Column>
        <Column field="email" header="Correo"></Column>
        <Column field="phone" header="Teléfono"></Column>
        <Column
          field="verified"
          header="Estado"
          body={(user) => (
            <Tag
              value={getKYCMessage(user.verified)}
              severity={getKYCStatus(user.verified)}
            ></Tag>
          )}
        ></Column>
        <Column
          header="KYC"
          body={(user) => (
            <CustomModal user={user as IUserWithKYC} load={load} />
          )}
        ></Column>
        {/* <Column field="KYC" header="KYC"></Column> */}
      </DataTable>
    </div>
  );
};

export default VerifyUsersPage;

const CustomModal = ({
  user,
  load,
}: {
  user: IUserWithKYC;
  load: () => void;
}) => {
  const [visible, setVisible] = useState(false);
  const [secondDialog, setSecondDialog] = useState(false);
  const [kyc, setKyc] = useState<Kyc>();
  const [incorrectData, setIncorrectData] = useState<string[]>([]);
  const [adicionalComment, setAdicionalComment] = useState("");

  const onIncorrectDataChange = (e: CheckboxChangeEvent) => {
    let _incorrectData = [...incorrectData];

    if (e.checked) _incorrectData.push(e.value);
    else _incorrectData.splice(_incorrectData.indexOf(e.value), 1);

    setIncorrectData(_incorrectData);
  };

  useEffect(() => {
    console.log(user);
    if (visible)
      getKYCByUserId(user.id)
        .then((kyc) => setKyc(kyc as any))
        .catch(console.log);
  }, [visible]);

  console.log(kyc);

  return (
    <div className="card flex justify-content-center">
      <Button
        label="Ver"
        icon="pi pi-search"
        onClick={() => setVisible(true)}
      />
      <Dialog
        header="Evaluar KYC"
        visible={visible}
        style={{ width: "70vw", maxWidth: "1000px" }}
        onHide={() => setVisible(false)}
        draggable={false}
        resizable={false}
      >
        <div className="flex justify-between">
          <div className="flex flex-col justify-between w-1/2">
            <div className="flex flex-col gap-2">
              <h2 className="py-2 px-4 bg-[#D9D9D9] rounded-xl">
                Nombre: {user.name || ""}
              </h2>
              <h2 className="py-2 px-4 bg-[#D9D9D9] rounded-xl">
                Apellido: {user.lastName || ""}
              </h2>
              <h2 className="py-2 px-4 bg-[#D9D9D9] rounded-xl">
                Correo: {user.email || ""}
              </h2>
              <h2 className="py-2 px-4 bg-[#D9D9D9] rounded-xl">
                Telefono: {user.phone || ""}
              </h2>
              <h2 className="py-2 px-4 bg-[#D9D9D9] rounded-xl">
                Estado: {user.verified || ""}
              </h2>
              <h2 className="py-2 px-4 bg-[#D9D9D9] rounded-xl">
                Documentos:{" "}
                {user.KYC[user.KYC.length - 1]?.documentType.toUpperCase() ||
                  ""}
              </h2>
            </div>
            <div className="flex items-center justify-center w-full gap-8 mt-8">
              <button
                className="bg-green-600 px-5 rounded-full hover:bg-green-300 transition-colors text-white py-1"
                onClick={async () => {
                  try {
                    const userFind = await getUser(user.id);
                    console.log(userFind);
                    if (userFind?.isMetamask) {
                      console.log("entro");
                      const provider = new ethers.providers.Web3Provider(
                        (window as any).ethereum
                      );
                      await (window as any).ethereum.enable();

                      const signer = provider.getSigner();

                      const custodyContract = new ethers.Contract(
                        CUSTODYCONTRACT,
                        CUSTODYABI,
                        signer
                      );
                      const txPass =
                        await custodyContract.getTransactionPassword();
                      const tx =
                        await custodyContract.getTransactionPrivateKeyAndAddress(
                          txPass
                        );
                      await addToWhiteListWithAdmin(userFind?.address!, tx[0]);
                      // await addToWhiteList(userFind?.address!);
                      await approveKyc(
                        user.KYC[user.KYC.length - 1].id,
                        userFind?.address!
                      );
                      await sendApproveEmail({
                        email: user.email,
                        name: user.name,
                      });
                      setVisible(false);
                      Swal.fire({
                        icon: "success",
                        title: "Aprobado",
                        text: "El usuario ha sido aprobado",
                      });
                      load();
                    } else {
                      if (
                        typeof window !== "undefined" &&
                        (window as any).ethereum
                      ) {
                        const provider = new ethers.providers.Web3Provider(
                          (window as any).ethereum
                        );
                        await (window as any).ethereum.enable();

                        const signer = provider.getSigner();

                        const custodyContract = new ethers.Contract(
                          CUSTODYCONTRACT,
                          CUSTODYABI,
                          signer
                        );
                        const txPass =
                          await custodyContract.getTransactionPassword();
                        const tx =
                          await custodyContract.getTransactionPrivateKeyAndAddress(
                            txPass
                          );
                        console.log(tx);

                        const { address, privateKey } = await createAddress();
                        const resp = await setPrivateKeyAndAddress(
                          address,
                          privateKey,
                          kyc?.passwordHashPrivateKey!,
                          tx[0]
                        );
                        await approveKyc(
                          user.KYC[user.KYC.length - 1].id,
                          address
                        );
                        await sendApproveEmail({
                          email: user.email,
                          name: user.name,
                        });
                        setVisible(false);
                        Swal.fire({
                          icon: "success",
                          title: "Aprobado",
                          text: "El usuario ha sido aprobado",
                        });
                        load();
                      }
                    }
                  } catch (error) {
                    setVisible(false);
                    console.log(error);
                    Swal.fire({
                      icon: "error",
                      title: "Error",
                      text: "Ha ocurrido un error al aprobar el usuario",
                    });
                  }
                }}
              >
                Aprovar
              </button>
              <button
                className="bg-red-600 px-5 rounded-full hover:bg-red-300 transition-colors text-white py-1"
                onClick={async () => {
                  try {
                    setSecondDialog(true);
                  } catch (error) {
                    console.log(error);
                  }
                }}
              >
                Denegar
              </button>
            </div>
          </div>
          <div className="flex gap-5 w-1/2">
            {user.KYC.map((kyc) => (
              <div className="w-full" key={kyc.id}>
                <div className="flex flex-col items-center h-full justify-evenly w-full aspect-video ">
                  <Image
                    src={kyc.documentFrontUrl}
                    alt="Front"
                    width="165"
                    className="object-cover"
                    preview
                  />
                  <Image
                    src={kyc.documentBackUrl}
                    alt="Back"
                    width="165"
                    className="object-cover"
                    preview
                  />
                </div>
              </div>
            ))}
          </div>
        </div>
        <Dialog
          onHide={() => setSecondDialog(false)}
          visible={secondDialog}
          draggable={false}
          resizable={false}
          header="Razón de rechazo"
          footer={
            <div className="flex justify-end gap-2">
              <Button
                label="Rechazar"
                className="bg-red-600 text-white py-2 px-4 rounded-md"
                onClick={async () => {
                  try {
                    await rejectKyc(
                      user.KYC[user.KYC.length - 1].id,
                      incorrectData,
                      adicionalComment
                    );
                    await sendRejectEmail({
                      email: user.email,
                      name: user.name,
                    });
                    setVisible(false);
                    setSecondDialog(false);
                    load();
                    Swal.fire({
                      icon: "success",
                      title: "Rechazado",
                      text: "El usuario ha sido rechazado",
                    });
                  } catch (error) {
                    console.log(error);
                  }
                }}
              />
            </div>
          }
        >
          <div className="flex flex-col gap-4">
            <div className="flex flex-wrap justify-content-center gap-3">
              <div className="flex align-items-center">
                <Checkbox
                  inputId="reasonName"
                  className="border rounded-md"
                  name="reasonIncorrectData"
                  value="ReasonName"
                  onChange={onIncorrectDataChange}
                  checked={incorrectData.includes("ReasonName")}
                />
                <label htmlFor="reasonName" className="ml-2">
                  Nombre
                </label>
              </div>
              <div className="flex align-items-center">
                <Checkbox
                  inputId="lastNameReason"
                  className="border rounded-md"
                  name="reasonIncorrectData"
                  value="LastNameReason"
                  onChange={onIncorrectDataChange}
                  checked={incorrectData.includes("LastNameReason")}
                />
                <label htmlFor="lastNameReason" className="ml-2">
                  Apellido
                </label>
              </div>
              <div className="flex align-items-center">
                <Checkbox
                  inputId="documentNumberReason"
                  className="border rounded-md"
                  name="reasonIncorrectData"
                  value="DocumentNumberReason"
                  onChange={onIncorrectDataChange}
                  checked={incorrectData.includes("DocumentNumberReason")}
                />
                <label htmlFor="documentNumberReason" className="ml-2">
                  N° de documento
                </label>
              </div>
              <div className="flex align-items-center">
                <Checkbox
                  inputId="imageReason"
                  className="border rounded-md"
                  name="reasonIncorrectData"
                  value="ImageReason"
                  onChange={onIncorrectDataChange}
                  checked={incorrectData.includes("ImageReason")}
                />
                <label htmlFor="imageReason" className="ml-2">
                  Imagenes
                </label>
              </div>
            </div>
            <div className="mt-2">
              <label htmlFor="rejectReason">Comentarios adicionales:</label>
              <input
                type="text"
                className="w-full border py-2 px-4"
                value={adicionalComment}
                onChange={(e) => setAdicionalComment(e.target.value)}
              />
            </div>
          </div>
        </Dialog>
      </Dialog>
    </div>
  );
};
